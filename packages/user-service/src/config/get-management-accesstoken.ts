import axios from "axios";
import { generateFromEmail } from "unique-username-generator";
import { IManagementAccessToken, IUserInfoResponse, User } from "../types";

//----------GET Auth0 Management API Token----------//
/**
 * Function that gets Management API Token.
 * @return {string}
 */
export const getMGMAccessToken = async (): Promise<string> => {
  try {
    const clientId = process.env.CLIENT_ID;
    const clientSecret = process.env.CLIENT_SECRET;
    const auth0Domain = process.env.AUTH0_DOMAIN;

    const response = await axios.post(
      `${process.env.AUTH0_DOMAIN}/oauth/token`,
      {
        client_id: clientId,
        client_secret: clientSecret,
        audience: `${auth0Domain}/api/v2/`,
        grant_type: "client_credentials",
      },
      { headers: { "content-type": "application/json" } },
    );

    const parsedBody = response.data as IManagementAccessToken;
    return parsedBody.access_token;
  } catch (error) {
    throw new Error("Failed to retrieve Management API access token details.");
  }
};

//----------GET Auth0 Test API Token----------//
/**
 * Function that gets Test API Token.
 * @return {string}
 */
export const getTestAccessToken = async (): Promise<string> => {
  try {
    const clientId = process.env.CLIENT_ID;
    const clientSecret = process.env.CLIENT_SECRET;

    const response = await axios.post(
      `${process.env.AUTH0_DOMAIN}/oauth/token`,
      {
        client_id: clientId,
        client_secret: clientSecret,
        audience: `Apollo`,
        grant_type: "client_credentials",
      },
      { headers: { "content-type": "application/json" } },
    );

    const parsedBody = response.data as IManagementAccessToken;
    return parsedBody.access_token;
  } catch (error) {
    throw new Error("Failed to retrieve Test access token details.");
  }
};

//----------GET User Info----------//
/**
 * Middleware Function that gets user info.
 * @param {string} accessToken - generated by getMGMAccessToken()
 * @param {string} id - coming from decoded auth token.
 * @return {User}
 */
export const getUserInfo = async (accessToken: string, id: string): Promise<User> => {
  try {
    const response = await axios.get(`${process.env.AUTH0_DOMAIN}/api/v2/users/${id}`, {
      headers: { authorization: `Bearer ${accessToken}` },
    });

    const data = response.data as IUserInfoResponse;

    const user: User = {
      auth_id: data.user_id,
      name: generateFromEmail(data.email, 5),
      email: data.email,
      profile_image_name: "",
      profile_image_url: data.picture,
    };
    return user;
  } catch (error) {
    throw new Error("Failed to retrieve User details.");
  }
};
